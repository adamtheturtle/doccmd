[build-system]
build-backend = "setuptools.build_meta"
requires = [
    "pip",
    "setuptools",
    "setuptools-scm[toml]>=8.1",
    "wheel",
]

[project]
name = "doccmd"
description = "Run commands against code blocks in reStructuredText and Markdown files."
readme = { file = "README.rst", content-type = "text/x-rst" }
keywords = [
    "markdown",
    "rst",
    "sphinx",
    "testing",
]
license = { file = "LICENSE" }
authors = [
    { name = "Adam Dangoor", email = "adamdangoor@gmail.com" },
]
requires-python = ">=3.10"
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Environment :: Web Environment",
    "License :: OSI Approved :: MIT License",
    "Operating System :: Microsoft :: Windows",
    "Operating System :: POSIX",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
]
dynamic = [
    "version",
]
dependencies = [
    "beartype>=0.19.0",
    "click>=8.1.7",
    "pygments>=2.18.0",
    "sybil>=7.0.0",
    # Pin this dependency as we expect:
    # * It might have breaking changes
    # * It is not a direct dependency of the user
    "sybil-extras==2024.10.13.1",
]
optional-dependencies.dev = [
    "actionlint-py==1.7.3.17",
    "check-manifest==0.50",
    "deptry==0.20.0",
    "doc8==1.1.2",
    "docformatter==1.7.5",
    "docker==7.1.0",
    "furo==2024.8.6",
    "interrogate==1.7.0",
    "mypy==1.11.2",
    "pre-commit==4.0.1",
    "pydocstyle==6.3",
    "pyenchant==3.3.0rc1",
    "pygments==2.18.0",
    "pylint==3.3.1",
    "pyproject-fmt==2.3.0",
    "pyright==1.1.384",
    "pyroma==4.2",
    "pytest==8.3.3",
    "pytest-cov==5.0.0",
    "pytest-regressions==2.5.0",
    "pyyaml==6.0.2",
    "ruff==0.6.9",
    # We add shellcheck-py not only for shell scripts and shell code blocks,
    # but also because having it installed means that ``actionlint-py`` will
    # use it to lint shell commands in GitHub workflow files.
    "shellcheck-py==0.10.0.1",
    "shfmt-py==3.7.0.1",
    "sphinx==8.1.3",
    "sphinx-click==6.0.0",
    "sphinx-copybutton==0.5.2",
    "sphinx-inline-tabs==2023.4.21",
    "sphinx-substitution-extensions==2024.8.6",
    "sphinxcontrib-spelling==8",
    "types-docker==7.1.0.20240827",
    "types-pygments==2.18.0.20240506",
    "vulture==2.13",
    "yamlfix==1.17.0",
]
optional-dependencies.packaging = [
    "pyinstaller==6.10.0",
]
optional-dependencies.release = [
    "check-wheel-contents==0.6.0",
    "homebrew-pypi-poet==0.10",
]
urls.Documentation = "https://doccmd.readthedocs.io/en/latest/"
urls.Source = "https://github.com/adamtheturtle/doccmd"
scripts.doccmd = "doccmd:main"

[tool.setuptools]
zip-safe = false

[tool.setuptools.packages.find]
where = [
    "src",
]

[tool.setuptools.package-data]
sybil_extras = [
    "py.typed",
]

[tool.distutils.bdist_wheel]
universal = true

[tool.setuptools_scm]

# We write the version to a file so that we can import it.
# We choose a ``.py`` file so that we can read it without
# worrying about including the file in MANIFEST.in.
write_to = "src/doccmd/_setuptools_scm_version.py"
# This keeps the start of the version the same as the last release.
# This is useful for our documentation to include e.g. binary links
# to the latest released binary.
#
# Code to match this is in ``conf.py``.
version_scheme = "post-release"

[tool.ruff]
line-length = 79

lint.select = [
    "ALL",
]
lint.ignore = [
    # We are happy to manage our own "complexity".
    "C901",
    # Ruff warns that this conflicts with the formatter.
    "COM812",
    # Allow our chosen docstring line-style - no one-line summary.
    "D200",
    "D205",
    "D212",
    "D415",
    # Ruff warns that this conflicts with the formatter.
    "ISC001",
    # Ignore "too-many-*" errors as they seem to get in the way more than
    # helping.
    "PLR0913",
    # Allow 'assert' as we use it for tests.
    "S101",
    # Ignore this rule which might go away and is too strict.
    "S603",
]

# Do not automatically remove commented out code.
# We comment out code during development, and with VSCode auto-save, this code
# is sometimes annoyingly removed.
lint.unfixable = [
    "ERA001",
]
lint.pydocstyle.convention = "google"

[tool.pylint]

[tool.pylint.'MASTER']

# Pickle collected data for later comparisons.
persistent = true

# Use multiple processes to speed up Pylint.
jobs = 0

# List of plugins (as comma separated values of python modules names) to load,
# usually to register additional checkers.
# See https://chezsoi.org/lucas/blog/pylint-strict-base-configuration.html.
# We do not use the plugins:
# - pylint.extensions.code_style
# - pylint.extensions.magic_value
# - pylint.extensions.while_used
# as they seemed to get in the way.
load-plugins = [
    'pylint.extensions.bad_builtin',
    'pylint.extensions.comparison_placement',
    'pylint.extensions.consider_refactoring_into_while_condition',
    'pylint.extensions.docparams',
    'pylint.extensions.dunder',
    'pylint.extensions.eq_without_hash',
    'pylint.extensions.for_any_all',
    'pylint.extensions.mccabe',
    'pylint.extensions.no_self_use',
    'pylint.extensions.overlapping_exceptions',
    'pylint.extensions.private_import',
    'pylint.extensions.redefined_loop_name',
    'pylint.extensions.redefined_variable_type',
    'pylint.extensions.set_membership',
    'pylint.extensions.typing',
]

# Allow loading of arbitrary C extensions. Extensions are imported into the
# active Python interpreter and may run arbitrary code.
unsafe-load-any-extension = false

ignore = [
    '_setuptools_scm_version.py',
]

[tool.pylint.'MESSAGES CONTROL']

# Enable the message, report, category or checker with the given id(s). You can
# either give multiple identifier separated by comma (,) or put this option
# multiple time (only on the command line, not in the configuration file where
# it should appear only once). See also the "--disable" option for examples.
enable = [
    'bad-inline-option',
    'deprecated-pragma',
    'file-ignored',
    'spelling',
    'use-symbolic-message-instead',
    'useless-suppression',
]

# Disable the message, report, category or checker with the given id(s). You
# can either give multiple identifiers separated by comma (,) or put this
# option multiple times (only on the command line, not in the configuration
# file where it should appear only once).You can also use "--disable=all" to
# disable everything first and then reenable specific checks. For example, if
# you want to run only the similarities checker, you can use "--disable=all
# --enable=similarities". If you want to run only the classes checker, but have
# no Warning level messages displayed, use"--disable=all --enable=classes
# --disable=W"

disable = [
    'too-few-public-methods',
    'too-many-locals',
    'too-many-arguments',
    'too-many-instance-attributes',
    'too-many-return-statements',
    'too-many-lines',
    'locally-disabled',
    # Let ruff handle long lines
    'line-too-long',
    # Let ruff handle unused imports
    'unused-import',
    # Let ruff deal with sorting
    'ungrouped-imports',
    # We don't need everything to be documented because of mypy
    'missing-type-doc',
    'missing-return-type-doc',
    # Too difficult to please
    'duplicate-code',
    # Let ruff handle imports
    'wrong-import-order',
    # mypy does not want untyped parameters.
    'useless-type-doc',
]

[tool.pylint.'FORMAT']

# Allow the body of an if to be on the same line as the test if there is no
# else.
single-line-if-stmt = false

[tool.pylint.'SPELLING']

# Spelling dictionary name. Available dictionaries: none. To make it working
# install python-enchant package.
spelling-dict = 'en_US'

# A path to a file that contains private dictionary; one word per line.
spelling-private-dict-file = 'spelling_private_dict.txt'

# Tells whether to store unknown words to indicated private dictionary in
# --spelling-private-dict-file option instead of raising a message.
spelling-store-unknown-words = 'no'

[tool.pylint.'TYPECHECK']

signature-mutators = [
    "click.decorators.option",
    "click.decorators.argument",
]

[tool.docformatter]
make-summary-multi-line = true

[tool.check-manifest]

ignore = [
    ".checkmake-config.ini",
    ".yamlfmt",
    "*.enc",
    ".git_archival.txt",
    ".pre-commit-config.yaml",
    ".shellcheckrc",
    ".vscode/**",
    "CHANGELOG.rst",
    "CODE_OF_CONDUCT.rst",
    "CONTRIBUTING.rst",
    "LICENSE",
    "Makefile",
    "admin",
    "admin/**",
    "bin",
    "bin/*",
    "ci",
    "ci/**",
    "codecov.yaml",
    "conftest.py",
    "doc8.ini",
    "docs",
    "docs/**",
    "lint.mk",
    "readthedocs.yaml",
    "spelling_private_dict.txt",
    "src/*/_setuptools_scm_version.py",
    "tests",
    "tests-pylintrc",
    "tests/**",
]

[tool.deptry]
pep621_dev_dependency_groups = [
    "dev",
    "packaging",
    "release",
]

[tool.pyproject-fmt]
indent = 4
keep_full_version = true
max_supported_python = "3.13"

[tool.pytest.ini_options]

xfail_strict = true
log_cli = true

[tool.coverage.run]

branch = true
omit = [
    'src/*/_setuptools_scm_version.py',
    'src/doccmd/__main__.py',
]

[tool.coverage.report]
exclude_also = [
    "if TYPE_CHECKING:",
]

[tool.mypy]

strict = true
files = [ "." ]
exclude = [ "build" ]

[tool.pyright]

reportUnnecessaryTypeIgnoreComment = true
typeCheckingMode = "strict"

[tool.interrogate]
fail-under = 100
omit-covered-files = true
verbose = 2
exclude = [
    "src/*/_setuptools_scm_version.py",
]

[tool.doc8]

max_line_length = 2000
ignore_path = [
    "./.eggs",
    "./docs/build",
    "./docs/build/spelling/output.txt",
    "./node_modules",
    "./src/*.egg-info/",
    "./src/*/_setuptools_scm_version.txt",
]

[tool.vulture]
# Ideally we would limit the paths to the source code where we want to ignore names,
# but Vulture does not enable this.
ignore_names = [
    # pytest configuration
    "pytest_collect_file",
    "pytest_collection_modifyitems",
    "pytest_plugins",
    # pytest fixtures - we name fixtures like this for this purpose
    "fixture_*",
    # Sphinx
    "autoclass_content",
    "autoclass_content",
    "autodoc_member_order",
    "copybutton_exclude",
    "extensions",
    "html_show_copyright",
    "html_show_sourcelink",
    "html_show_sphinx",
    "html_theme",
    "html_theme_options",
    "html_title",
    "htmlhelp_basename",
    "intersphinx_mapping",
    "language",
    "linkcheck_ignore",
    "linkcheck_retries",
    "master_doc",
    "nitpicky",
    "project_copyright",
    "pygments_style",
    "rst_prolog",
    "source_suffix",
    "spelling_word_list_filename",
    "templates_path",
    "warning_is_error",
]

exclude = [
    # Duplicate some of .gitignore
    ".venv",
    # We ignore the version file as it is generated by setuptools_scm.
    "_setuptools_scm_version.py",
]

[tool.yamlfix]
section_whitelines = 1
whitelines = 1
